# library(readr)
# library(jsonlite)
# library(magrittr)
# library(dplyr)
# library(tidyr)
# library(knitr)
# library(stringr)
# sample_id <- params$Sample
# outlier_lead <- params$Gene
# exp <- params$Expression
# threshold <- params$Threshold
# type <- params$Type
# mend_depth <- params$Depth
# gene_length <- params$Length
# start scratch
sample_id <- "TH_Eval_014_est10M_UMEND_seqtk_seed_8652"
outlier_lead <- "SGCA"
exp <- 2.1
threshold <- 2
type <- "Up"
mend_depth <- 1
gene_length <- 100
# end scratch
# Figure out expression bin
expression_bins_all <- c("0-1", "1-3", "3-5", "5-7", "7-10", "10-20")
exp_bins <- strsplit(expression_bins_all, '-')
exp <- as.numeric(exp)
if (exp >= 20) {
stop("expression >= 20. make sure your expression is in log2(TPM+1)")
}
expression_bin <- expression_bins_all[lapply(exp_bins, function(exp_bin) {
exp >= as.numeric(exp_bin[1]) & exp < as.numeric(exp_bin[2])
}) %>%
unlist]
# Figure out MEND depth bin
mend_depth_bins_all <- seq(0, 44, 4)
mend_depth <- as.numeric(mend_depth)
if (mend_depth >= 42) {
mend_depth_bin <- 44
} else if (mend_depth < 2) {
mend_depth_bin <- 0
} else {
mend_depth_bin <- round(mend_depth / 4) * 4
}
# Figure out effective gene length bin
gene_length <- as.numeric(gene_length)
length_bins <- c(0, 200, 400, 600, 800, 1000, 1200, 1500, 2000, 3000, 4000)
length_bins_all <- c("0-200",
"200-400",
"400-600",
"600-800",
"800-1000",
"1000-1200",
"1200-1500",
"1500-2000",
"2000-3000",
"3000-4000",
"4000+")
length_bin = length_bins_all[findInterval(gene_length, length_bins)]
# Start building summary table
threshold <- as.numeric(threshold)
exp <- as.numeric(exp)
summary <- tibble(sample = sample_id,
gene = outlier_lead,
type = type,
expression = exp,
threshold = threshold,
mend_depth = mend_depth,
gene_length = gene_length)
# Calculate percent difference
summary <- summary %>%
mutate(percent_difference = 100 * ((abs(expression - threshold)) / expression))
# Get accuracy distributions
if (!(is.na(summary$percent_difference))) {
# Set accuracy threshold and get accuracy info
non_zero_abundance <- per_gene_expression_info %>%
mutate(within_accuracy_threshold_of_deepest_val =
expression > (1 - summary$percent_difference / 100) * expression_at_max_depth &
expression < (1 + summary$percent_difference / 100) * expression_at_max_depth)
# Make expression bins and generate summary statistics
break_sequence <- c(0, 1, 3, 5, 7, 10, 20)
length_break_sequence <- c(0, 200, 400, 600, 800, 1000, 1200, 1500, 2000, 3000, 4000,
ceiling(max(non_zero_abundance$effective_gene_length)))
abundance_by_expression_bin <- non_zero_abundance %>%
ungroup() %>%
mutate(expression_bin = cut(expression_at_max_depth, breaks = break_sequence, dig.lab = 6, include.lowest = TRUE),
effective_gene_length_bin = cut(effective_gene_length, breaks = length_break_sequence, dig.lab = 6, include.lowest = TRUE))
abundance_stats <- abundance_by_expression_bin	%>%
group_by(expression_bin, bin_median, UMEND, parent_id, effective_gene_length_bin) %>%
summarize(pct_accurately_measured = sum(within_accuracy_threshold_of_deepest_val) / n(),
n_genes_in_bin = length(unique(gene)),
expression_bin_label = paste0(gsub(
"]", "", gsub(",", "-", gsub("[\\[]*", "", gsub("[\\(]*", "", unique(expression_bin))))), " (n=", n_genes_in_bin, ")"),
length_bin_label = length_bins_all[as.integer(unique(effective_gene_length_bin))])
abundance_stats <- abundance_stats %>%
mutate(min_bin_label = gsub(" .*$", "", expression_bin_label),
pct_accurately_measured = pct_accurately_measured * 100)
}
# Filter results
if (!(is.null(abundance_stats))) {
exp <- expression_bin # for some reason it doesn't work without doing it this way
stats_filtered <- abundance_stats %>%
ungroup %>%
filter((bin_median == mend_depth_bin) &
(min_bin_label == exp) &
(length_bin_label == length_bin)) %>%
arrange(parent_id)
}
# Get accuracy stats
summary <- summary %>%
mutate(
avg = mean(stats_filtered$pct_accurately_measured),
min = min(stats_filtered$pct_accurately_measured),
max = max(stats_filtered$pct_accurately_measured),
S1 = stats_filtered$pct_accurately_measured[1],
S2 = stats_filtered$pct_accurately_measured[2],
S3 = stats_filtered$pct_accurately_measured[3],
S4 = stats_filtered$pct_accurately_measured[4],
S5 = stats_filtered$pct_accurately_measured[5]
)
# Change values from 0-100 scale to 0-1 scale
summary[9:ncol(summary)] <- summary[9:ncol(summary)]/100
# Add column that checks if probability >= 0.95
summary <- add_column(summary, prob95 = summary$avg >= 0.95, .after = "percent_difference")
# Clean up names for writing to outfile
names(summary) <- gsub("_", " ", str_to_sentence(names(summary)))
summary <- summary %>%
rename("Probability >= 0.95" = Prob95,
"Probability of being an outlier" = Avg,
"Minimum Probability" = Min,
"Maximum Probability" = Max,
"Sample 1 Probability" = S1,
"Sample 2 Probability" = S2,
"Sample 3 Probability" = S3,
"Sample 4 Probability" = S4,
"Sample 5 Probability" = S5)
# Write to outfile
if ( ! dir.exists(paste0("results/", sample_id))) dir.create(paste0("results/", sample_id))
write_tsv(summary, paste0("results/", sample_id, "/sample_", sample_id, "__gene_", outlier_lead, "__summary.tsv"))
# Show short summary table & long summary table
kable(summary[1:10], digits = 4)
kable(summary, digits = 4)
length_bins <- c(0, 100, 250, 400, 600, 900, 1200, 1500, 2000, 3000, 4000)
length_bins_all <- c("0-100",
"100-250",
"250-400",
"400-600",
"600-900",
"900-1200",
"1200-1500",
"1500-2000",
"2000-3000",
"3000-4000",
"4000+")
pgea <- pge %>%
mutate(within1=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.01,
within5=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.05,
within10=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.10,
within25=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.25,
within50=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.50,
length_bin = length_bins_all[findInterval(effective_gene_length, length_bins)],
lb = length_bins[findInterval(effective_gene_length, length_bins)])
# Plot accuracies
pgea_fractions <- pgea %>%
group_by(length_bin, lb) %>%
summarize(n=n(),
frac1=sum(within1)/n(),
frac5=sum(within5)/n(),
frac10=sum(within10)/n(),
frac25=sum(within25)/n(),
frac50=sum(within50)/n())
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin")
pge <- read_tsv("/Users/jacquelynroger/Documents/research/treehouse/projects/gene_expression_outlier_accuracy/accuracy_calculation/data/in/per_gene_expression.tsv.gz")
# Histogram of distribution
ggplot(pge, aes(x=effective_gene_length)) +
geom_histogram() +
xlim(0, 10000) +
ggtitle("Distribution of gene lengths")
# Percentiles
quantile(pge$effective_gene_length, probs = seq(0, 1, by= 0.1))
# Accuracies
length_bins <- c(0, 100, 250, 400, 600, 900, 1200, 1500, 2000, 3000, 4000)
length_bins_all <- c("0-100",
"100-250",
"250-400",
"400-600",
"600-900",
"900-1200",
"1200-1500",
"1500-2000",
"2000-3000",
"3000-4000",
"4000+")
pgea <- pge %>%
mutate(within1=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.01,
within5=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.05,
within10=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.10,
within25=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.25,
within50=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.50,
length_bin = length_bins_all[findInterval(effective_gene_length, length_bins)],
lb = length_bins[findInterval(effective_gene_length, length_bins)])
# Plot accuracies
pgea_fractions <- pgea %>%
group_by(length_bin, lb) %>%
summarize(n=n(),
frac1=sum(within1)/n(),
frac5=sum(within5)/n(),
frac10=sum(within10)/n(),
frac25=sum(within25)/n(),
frac50=sum(within50)/n())
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin")
View(pgea)
pgea <- pge %>%
dplyr::filter(f_expression_at_max_depth_Gt0) %>%
mutate(within1=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.01,
within5=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.05,
within10=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.10,
within25=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.25,
within50=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.50,
length_bin = length_bins_all[findInterval(effective_gene_length, length_bins)],
lb = length_bins[findInterval(effective_gene_length, length_bins)])
# Plot accuracies
pgea_fractions <- pgea %>%
group_by(length_bin, lb) %>%
summarize(n=n(),
frac1=sum(within1)/n(),
frac5=sum(within5)/n(),
frac10=sum(within10)/n(),
frac25=sum(within25)/n(),
frac50=sum(within50)/n())
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin")
quantile(pge$effective_gene_length, probs = seq(0, 1, by= 0.1))
length_bins <- c(0, 100, 250, 400, 600, 900, 1200, 1500, 2000, 3000, 5000)
length_bins_all <- c("0-100",
"100-250",
"250-400",
"400-600",
"600-900",
"900-1200",
"1200-1500",
"1500-2000",
"2000-3000",
"3000-5000",
"5000+")
pgea <- pge %>%
dplyr::filter(f_expression_at_max_depth_Gt0) %>%
mutate(within1=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.01,
within5=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.05,
within10=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.10,
within25=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.25,
within50=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.50,
length_bin = length_bins_all[findInterval(effective_gene_length, length_bins)],
lb = length_bins[findInterval(effective_gene_length, length_bins)])
# Plot accuracies
pgea_fractions <- pgea %>%
group_by(length_bin, lb) %>%
summarize(n=n(),
frac1=sum(within1)/n(),
frac5=sum(within5)/n(),
frac10=sum(within10)/n(),
frac25=sum(within25)/n(),
frac50=sum(within50)/n())
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin")
length_bins <- c(0, 100, 250, 400, 600, 900, 1200, 1500, 2000, 3000, 4000, 5000, 6000)
length_bins_all <- c("0-100",
"100-250",
"250-400",
"400-600",
"600-900",
"900-1200",
"1200-1500",
"1500-2000",
"2000-3000",
"3000-4000",
"4000-5000",
"5000-6000",
"6000+")
pgea <- pge %>%
dplyr::filter(f_expression_at_max_depth_Gt0) %>%
mutate(within1=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.01,
within5=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.05,
within10=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.10,
within25=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.25,
within50=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.50,
length_bin = length_bins_all[findInterval(effective_gene_length, length_bins)],
lb = length_bins[findInterval(effective_gene_length, length_bins)])
# Plot accuracies
pgea_fractions <- pgea %>%
group_by(length_bin, lb) %>%
summarize(n=n(),
frac1=sum(within1)/n(),
frac5=sum(within5)/n(),
frac10=sum(within10)/n(),
frac25=sum(within25)/n(),
frac50=sum(within50)/n())
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin")
ggplot(pge, aes(x=effective_gene_length)) +
geom_histogram() +
xlim(0, 10000) +
ggtitle("Distribution of gene lengths")
# Percentiles
quantile(pge$effective_gene_length, probs = seq(0, 1, by= 0.1))
# Accuracies
length_bins <- c(0, 100, 250, 400, 600, 900, 1200, 1500, 2000, 3000, 4000)
length_bins_all <- c("0-100",
"100-250",
"250-400",
"400-600",
"600-900",
"900-1200",
"1200-1500",
"1500-2000",
"2000-3000",
"3000-4000",
"4000+")
pgea <- pge %>%
dplyr::filter(f_expression_at_max_depth_Gt0) %>%
mutate(within1=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.01,
within5=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.05,
within10=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.10,
within25=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.25,
within50=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.50,
length_bin = length_bins_all[findInterval(effective_gene_length, length_bins)],
lb = length_bins[findInterval(effective_gene_length, length_bins)])
# Plot accuracies
pgea_fractions <- pgea %>%
group_by(length_bin, lb) %>%
summarize(n=n(),
frac1=sum(within1)/n(),
frac5=sum(within5)/n(),
frac10=sum(within10)/n(),
frac25=sum(within25)/n(),
frac50=sum(within50)/n())
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin")
# library(readr)
# library(jsonlite)
# library(magrittr)
# library(dplyr)
# library(tidyr)
# library(knitr)
# library(stringr)
# sample_id <- params$Sample
# outlier_lead <- params$Gene
# exp <- params$Expression
# threshold <- params$Threshold
# type <- params$Type
# mend_depth <- params$Depth
# gene_length <- params$Length
# start scratch
sample_id <- "TH_Eval_014_est10M_UMEND_seqtk_seed_8652"
outlier_lead <- "SGCA"
exp <- 4
threshold <- 2
type <- "Up"
mend_depth <- 20
gene_length <- 1000
# end scratch
# Figure out expression bin
expression_bins_all <- c("0-1", "1-3", "3-5", "5-7", "7-10", "10-20")
exp_bins <- strsplit(expression_bins_all, '-')
exp <- as.numeric(exp)
if (exp >= 20) {
stop("expression >= 20. make sure your expression is in log2(TPM+1)")
}
expression_bin <- expression_bins_all[lapply(exp_bins, function(exp_bin) {
exp >= as.numeric(exp_bin[1]) & exp < as.numeric(exp_bin[2])
}) %>%
unlist]
# Figure out MEND depth bin
mend_depth_bins_all <- seq(0, 44, 4)
mend_depth <- as.numeric(mend_depth)
if (mend_depth >= 42) {
mend_depth_bin <- 44
} else if (mend_depth < 2) {
mend_depth_bin <- 0
} else {
mend_depth_bin <- round(mend_depth / 4) * 4
}
# Figure out effective gene length bin
gene_length <- as.numeric(gene_length)
length_bins <- c(0, 100, 250, 400, 600, 900, 1200, 1500, 2000, 3000, 4000)
length_bins_all <- c("0-100",
"100-250",
"250-400",
"400-600",
"600-900",
"900-1200",
"1200-1500",
"1500-2000",
"2000-3000",
"3000-4000",
"4000+")
length_bin = length_bins_all[findInterval(gene_length, length_bins)]
# Start building summary table
threshold <- as.numeric(threshold)
exp <- as.numeric(exp)
summary <- tibble(sample = sample_id,
gene = outlier_lead,
type = type,
expression = exp,
threshold = threshold,
mend_depth = mend_depth,
gene_length = gene_length)
# Calculate percent difference
summary <- summary %>%
mutate(percent_difference = 100 * ((abs(expression - threshold)) / expression))
# Get accuracy distributions
if (!(is.na(summary$percent_difference))) {
# Set accuracy threshold and get accuracy info
non_zero_abundance <- per_gene_expression_info %>%
mutate(within_accuracy_threshold_of_deepest_val =
expression > (1 - summary$percent_difference / 100) * expression_at_max_depth &
expression < (1 + summary$percent_difference / 100) * expression_at_max_depth)
# Make expression bins and generate summary statistics
break_sequence <- c(0, 1, 3, 5, 7, 10, 20)
length_break_sequence <- c(0, 100, 250, 400, 600, 900, 1200, 1500, 2000, 3000, 4000,
ceiling(max(non_zero_abundance$effective_gene_length)))
abundance_by_expression_bin <- non_zero_abundance %>%
ungroup() %>%
mutate(expression_bin = cut(expression_at_max_depth, breaks = break_sequence, dig.lab = 6, include.lowest = TRUE),
effective_gene_length_bin = cut(effective_gene_length, breaks = length_break_sequence, dig.lab = 6, include.lowest = TRUE))
abundance_stats <- abundance_by_expression_bin	%>%
group_by(expression_bin, bin_median, UMEND, parent_id, effective_gene_length_bin) %>%
summarize(pct_accurately_measured = sum(within_accuracy_threshold_of_deepest_val) / n(),
n_genes_in_bin = length(unique(gene)),
expression_bin_label = paste0(gsub(
"]", "", gsub(",", "-", gsub("[\\[]*", "", gsub("[\\(]*", "", unique(expression_bin))))), " (n=", n_genes_in_bin, ")"),
length_bin_label = length_bins_all[as.integer(unique(effective_gene_length_bin))])
abundance_stats <- abundance_stats %>%
mutate(min_bin_label = gsub(" .*$", "", expression_bin_label),
pct_accurately_measured = pct_accurately_measured * 100)
}
# Filter results
if (!(is.null(abundance_stats))) {
exp <- expression_bin # for some reason it doesn't work without doing it this way
stats_filtered <- abundance_stats %>%
ungroup %>%
filter((bin_median == mend_depth_bin) &
(min_bin_label == exp) &
(length_bin_label == length_bin)) %>%
arrange(parent_id)
}
# Get accuracy stats
summary <- summary %>%
mutate(
avg = mean(stats_filtered$pct_accurately_measured),
min = min(stats_filtered$pct_accurately_measured),
max = max(stats_filtered$pct_accurately_measured),
S1 = stats_filtered$pct_accurately_measured[1],
S2 = stats_filtered$pct_accurately_measured[2],
S3 = stats_filtered$pct_accurately_measured[3],
S4 = stats_filtered$pct_accurately_measured[4],
S5 = stats_filtered$pct_accurately_measured[5]
)
# Change values from 0-100 scale to 0-1 scale
summary[9:ncol(summary)] <- summary[9:ncol(summary)]/100
# Add column that checks if probability >= 0.95
summary <- add_column(summary, prob95 = summary$avg >= 0.95, .after = "percent_difference")
# Clean up names for writing to outfile
names(summary) <- gsub("_", " ", str_to_sentence(names(summary)))
summary <- summary %>%
rename("Probability >= 0.95" = Prob95,
"Probability of being an outlier" = Avg,
"Minimum Probability" = Min,
"Maximum Probability" = Max,
"Sample 1 Probability" = S1,
"Sample 2 Probability" = S2,
"Sample 3 Probability" = S3,
"Sample 4 Probability" = S4,
"Sample 5 Probability" = S5)
# Write to outfile
if ( ! dir.exists(paste0("results/", sample_id))) dir.create(paste0("results/", sample_id))
write_tsv(summary, paste0("results/", sample_id, "/sample_", sample_id, "__gene_", outlier_lead, "__summary.tsv"))
# Show short summary table & long summary table
kable(summary[1:10], digits = 4)
kable(summary, digits = 4)
