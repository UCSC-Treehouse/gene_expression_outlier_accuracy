library(tidyverse)
library(dplyr)
library(tidyr)
library(janitor)
library(cowplot)
data_release_id <- "CKCC_outlier_lead_accuracy.results.2020_07_17"
gathered_results <- read_tsv(paste0("bulk_results.", data_release_id, ".tsv.gz")) %>%
rename(Mean_Accuracy = `Mean Accuracy`)
exp_bins <- c(0, 1, 3, 5, 7, 10)
expression_bins_all <- c("0-1", "1-3", "3-5", "5-7", "7-10", "10+")
# length_bins <- c(0, 200, 400, 600, 800, 1000, 1200, 1500, 2000, 3000, 4000)
# length_bins_all <- c("0-200",
#                      "200-400",
#                      "400-600",
#                      "600-800",
#                      "800-1000",
#                      "1000-1200",
#                      "1200-1500",
#                      "1500-2000",
#                      "2000-3000",
#                      "3000-4000",
#                      "4000+")
length_bins <- seq(0, 3000, 300)
length_bins_all <- paste(length_bins, lead(length_bins), sep = "-") %>%
str_replace("-NA", "+")
bulk_results <- gathered_results %>%
mutate(MEND_bin = round((MEND_depth/1e6) / 4) * 4,
MEND_bin = ifelse(MEND_depth>44*1e6, 44, MEND_bin),
Expression_bin = expression_bins_all[findInterval(Expression, exp_bins)],
length_bin = length_bins_all[findInterval(effective_length, length_bins)])
table(bulk_results$MEND_bin)
dim(bulk_results)
dim(is.na(bulk_results))
just_MEND_depths <- bulk_results %>%
select(Sample, MEND_depth)
ggplot(just_MEND_depths) +
geom_histogram(aes(x=MEND_depth/1E6))
range(just_MEND_depths$MEND_depth/1e6)
range(summary(just_MEND_depths$MEND_depth/1e6))
# Histogram of number of outlier leads per sample (split by outlier type & fill is depth)
num_leads <- bulk_results %>% group_by(Sample, Type, MEND_bin) %>% tally()
plot1 <- ggplot(num_leads, aes(x=n, fill=as.factor(MEND_bin))) +
geom_histogram() +
facet_wrap(~Type) +
ggtitle("Number of outlier leads per sample")
plot1
# Make sure (depth, expression, length) bins are relatively similar sizes
all_bins <- bulk_results %>% tabyl(MEND_bin, Expression_bin, length_bin)
all_bins
plot2 <- ggplot(bulk_results, aes(x=Mean_Accuracy)) +
geom_histogram() +
facet_wrap(~MEND_bin) +
ggtitle("Spectrum of accuracies by MEND depth")
plot2
plot3 <- ggplot(bulk_results, aes(x=Mean_Accuracy)) +
geom_histogram() +
facet_wrap(~Expression_bin) +
ggtitle("Spectrum of accuracies by expression level")
plot3
plot4 <- ggplot(bulk_results, aes(x=Mean_Accuracy)) +
geom_histogram() +
facet_wrap(~length_bin) +
ggtitle("Spectrum of accuracies by effective gene length")
plot4
bulk_results$Type <- factor(bulk_results$Type, levels = c("Up", "Down"))
acc_overview <- ggplot(bulk_results, aes(x=Mean_Accuracy, color=Type)) +
geom_histogram(fill="white") +
facet_wrap(~Type, scales="free") +
scale_color_brewer(palette = "Set1") +
theme_bw() +
xlab("Accuracy") +
ylab("Gene expression measurements") +
ggtitle("Accuracies of up and down outlier gene expression measurements")
acc_overview
ggsave("../figures/accuracies_all.png", acc_overview)
figure1_data <- bulk_results %>%
mutate(exp_gt5 = Expression >= 5,
depth_gt20 = MEND_bin >= 20,
length_gt1000 = effective_length >= 1000)
# Expression above or below 5
ggplot(subset(figure1_data, Type == "Up"), aes(x=exp_gt5, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Exp >= 5", "FALSE"="Exp < 5")) +
ylab("Accuracy") +
xlab("Expression above or below 5 log2(TPM+1)") +
ggtitle("Accuracies of up outliers with high and low gene expression")
ggsave("..//figures/accuracies_up_exp.png")
ggplot(subset(figure1_data, Type == "Down"), aes(x=exp_gt5, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Exp >= 5", "FALSE"="Exp < 5")) +
ylab("Accuracy") +
xlab("Gene expression above or below 5 log2(TPM+1)") +
ggtitle("Accuracies of down outliers with high and low gene expression")
ggsave("..//figures/accuracies_down_exp.png")
# Depth above or below 20
ggplot(subset(figure1_data, Type == "Up"), aes(x=depth_gt20, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Depth >= 20", "FALSE"="Depth < 20")) +
ylab("Accuracy") +
xlab("MEND depth above or below 20 million MEND reads") +
ggtitle("Accuracies of up outliers with high and low MEND read depth")
ggsave("..//figures/accuracies_up_depth.png")
ggplot(subset(figure1_data, Type == "Down"), aes(x=depth_gt20, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Depth >= 20", "FALSE"="Depth < 20")) +
ylab("Accuracy") +
xlab("MEND depth above or below 20 million MEND reads") +
ggtitle("Accuracies of down outliers with high and low MEND read depth")
ggsave("..//figures/accuracies_down_depth.png")
# Length above or below 1000
ggplot(subset(figure1_data, Type == "Up"), aes(x=length_gt1000, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Length >= 1000", "FALSE"="Length < 1000")) +
ylab("Accuracy") +
xlab("Gene length above or below 1000 base pairs") +
ggtitle("Accuracies of up outliers with high and low effective gene length")
ggsave("..//figures/accuracies_up_length.png")
ggplot(subset(figure1_data, Type == "Down"), aes(x=length_gt1000, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Length >= 1000", "FALSE"="Length < 1000")) +
ylab("Accuracy") +
xlab("Gene length above or below 1000 base pairs") +
ggtitle("Accuracies of down outliers with high and low effective gene length")
ggsave("..//figures/accuracies_down_length.png")
summary(bulk_results$`Percent difference`)
# StatBin2 allows depiction of empty bins as blank instead of a horizontal line:
# https://stackoverflow.com/questions/57128090/remove-baseline-color-for-geom-histogram
StatBin2 <- ggproto(
"StatBin2",
StatBin,
compute_group = function (data, scales, binwidth = NULL, bins = NULL,
center = NULL, boundary = NULL,
closed = c("right", "left"), pad = FALSE,
breaks = NULL, origin = NULL, right = NULL,
drop = NULL, width = NULL) {
if (!is.null(breaks)) {
if (!scales$x$is_discrete()) {
breaks <- scales$x$transform(breaks)
}
bins <- ggplot2:::bin_breaks(breaks, closed)
}
else if (!is.null(binwidth)) {
if (is.function(binwidth)) {
binwidth <- binwidth(data$x)
}
bins <- ggplot2:::bin_breaks_width(scales$x$dimension(), binwidth,
center = center, boundary = boundary,
closed = closed)
}
else {
bins <- ggplot2:::bin_breaks_bins(scales$x$dimension(), bins,
center = center, boundary = boundary,
closed = closed)
}
res <- ggplot2:::bin_vector(data$x, bins, weight = data$weight, pad = pad)
# drop 0-count bins completely before returning the dataframe
res <- res[res$count > 0, ]
res
})
# to get hex codes from palette
# library(RColorBrewer)
# brewer.pal(12, "Set1")
type_colors = c(Up = "#E41A1C", Down = "#377EB8")
bulk_results$Type <- factor(bulk_results$Type, levels = c("Up", "Down"))
acc_overview <- ggplot(bulk_results, aes(x=Mean_Accuracy, color=Type)) +
geom_histogram(fill="white", stat = StatBin2) +
facet_wrap(~Type, scales="free") +
theme_bw() +
scale_color_manual(values = type_colors) +
theme(legend.position="none") +
xlab("") +
ylab("Gene\nexpression\nmeasurements")
expr_split <- 5
depth_split <- 20
length_split <- 1000
diff_split <- 30
figure1_data_v2 <- bind_rows(figure1_data %>% mutate(set = c(paste0("Expression<", expr_split), paste0("Expression>=", expr_split))[1 + (Expression >= expr_split)]),
figure1_data %>% mutate(set = c(paste0("Depth<", depth_split), paste0("Depth>=", depth_split))[1 + (MEND_bin >= depth_split)]),
figure1_data %>% mutate(set = c(paste0("Length<", length_split), paste0("Length>=", length_split))[1 + (effective_length >= length_split)]),
figure1_data %>% mutate(set = c(paste0("Difference<", diff_split), paste0("Difference>=", diff_split))[1 + (`Percent difference` >= diff_split)]))
all_boxplots <- ggplot(figure1_data_v2, aes(y=set, x=Mean_Accuracy, fill = Type)) +
geom_boxplot(outlier.size = 0.5) +
theme_bw() +
scale_fill_manual(values = type_colors) +
scale_color_manual(values = type_colors) +
facet_wrap(~Type, ncol = 2) +
theme(legend.position="none") +
ylab("")
all_boxplots
combined_image <- plot_grid(acc_overview, all_boxplots, ncol = 1, rel_heights = c(1,2), align = "v",
labels = "AUTO")
combined_image
ggsave("../figures/fig1.png", combined_image)
# Average number of up and down outliers per sample
mean(subset(num_leads, Type == "Up")$n)
mean(subset(num_leads, Type == "Down")$n)
median(subset(num_leads, Type == "Up")$n)
median(subset(num_leads, Type == "Down")$n)
# Average accuracies of up and down outliers per sample
mean(subset(figure1_data, Type == "Up" & !is.na(Mean_Accuracy))$Mean_Accuracy)
mean(subset(figure1_data, Type == "Down" & !is.na(Mean_Accuracy))$Mean_Accuracy)
median(subset(figure1_data, Type == "Up" & !is.na(Mean_Accuracy))$Mean_Accuracy)
median(subset(figure1_data, Type == "Down" & !is.na(Mean_Accuracy))$Mean_Accuracy)
# Fraction of accuracies above 95%
count(subset(figure1_data, Type == "Up" & Mean_Accuracy>95)) /
count(subset(figure1_data, Type == "Up"))
count(subset(figure1_data, Type == "Down" & Mean_Accuracy>95)) /
count(subset(figure1_data, Type == "Down"))
count(subset(figure1_data, Mean_Accuracy>95)) /
count(figure1_data)
# the bump in distribution due to the 0-1 crowd
median(subset(figure1_data, Expression_bin == "0-1")$Mean_Accuracy)
head(bulk_results$Mean_Accuracy)
head(sort(bulk_results$Mean_Accuracy))
dim(bulk_results)
summary(bulk_results$Mean_Accuracy
)
